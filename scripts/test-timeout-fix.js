#!/usr/bin/env node

/**
 * Script de test pour v√©rifier les am√©liorations de timeout
 * Teste la g√©n√©ration de critiques avec gestion des timeouts
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');

async function testTimeoutImprovements() {
  console.log('üß™ Test des am√©liorations de timeout pour la g√©n√©ration de critiques\n');
  
  // Configuration Gemini
  const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY);
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  
  // Test avec un prompt optimis√©
  const testPrompt = `Critique musicale de 120-150 mots en fran√ßais :

ALBUM: Abbey Road - The Beatles (1969)
GENRE: Rock | STYLE: Psychedelic Rock, Pop Rock
TRACKS: Come Together, Something, Maxwell's Silver Hammer, Oh! Darling, Octopus's Garden + 12 autres

√âcris une critique qui couvre :
1. L'essence de l'album (vision, intention)
2. Analyse musicale (points forts/faiblesses)
3. Impact et influence
4. Note finale sur 10 avec d√©cimale

CRIT√àRES :
- 9-10/10 : Chef-d'≈ìuvre exceptionnel
- 7-8/10 : Tr√®s bon avec imperfections mineures  
- 5-6/10 : Correct mais sans √©clat
- 3-4/10 : D√©cevant avec probl√®mes notables
- 1-2/10 : Rat√©, peu d'int√©r√™t
- 0/10 : √âchec complet

R√àGLES :
- Sois honn√™te et √©quilibr√©
- Commence par ce que l'album EST
- Pointe les d√©fauts constructivement
- Compare aux standards du genre
- Termine par "Note : X.X/10"`;

  console.log('üì§ Test de g√©n√©ration avec prompt optimis√©...');
  console.log('‚è±Ô∏è  Timeout configur√© √† 45 secondes\n');
  
  try {
    const startTime = Date.now();
    
    // Timeout de 45 secondes
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout de g√©n√©ration Gemini')), 45000);
    });
    
    const generationPromise = model.generateContent(testPrompt);
    
    const result = await Promise.race([generationPromise, timeoutPromise]);
    const review = result.response.text();
    
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ Critique g√©n√©r√©e avec succ√®s en ${duration}ms`);
    console.log(`üìè Longueur: ${review.length} caract√®res`);
    console.log(`üìù Aper√ßu: ${review.substring(0, 200)}...`);
    
    // Test d'extraction de note
    const ratingPatterns = [
      /note[:\s]*(\d+(?:\.\d+)?)\/10/i,
      /(\d+(?:\.\d+)?)\/10/i,
      /(\d+(?:\.\d+)?)\s*\/\s*10/i,
      /(\d+(?:\.\d+)?)\s*sur\s*10/i,
      /note[:\s]*(\d+(?:\.\d+)?)/i
    ];
    
    let rating = null;
    for (const pattern of ratingPatterns) {
      const match = review.match(pattern);
      if (match) {
        rating = parseFloat(match[1]);
        break;
      }
    }
    
    if (rating !== null) {
      console.log(`‚≠ê Note extraite: ${rating}/10`);
    } else {
      console.log('‚ö†Ô∏è  Aucune note trouv√©e dans la critique');
    }
    
    // V√©rification de la qualit√©
    if (review.length < 50) {
      console.log('‚ùå Critique trop courte, probablement incompl√®te');
    } else if (review.length > 300) {
      console.log('‚ö†Ô∏è  Critique plus longue que pr√©vu (mais acceptable)');
    } else {
      console.log('‚úÖ Longueur de critique appropri√©e');
    }
    
    console.log('\nüéØ Test de performance:');
    if (duration < 10000) {
      console.log('üöÄ Excellent: G√©n√©ration tr√®s rapide (< 10s)');
    } else if (duration < 30000) {
      console.log('‚úÖ Bon: G√©n√©ration dans les temps (< 30s)');
    } else if (duration < 45000) {
      console.log('‚ö†Ô∏è  Lent mais acceptable (< 45s)');
    } else {
      console.log('‚ùå Trop lent: D√©passement du timeout');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    
    if (error.message.includes('Timeout')) {
      console.log('üí° Le timeout fonctionne correctement');
    } else if (error.message.includes('quota')) {
      console.log('üí° Probl√®me de quota Google Gemini');
    } else if (error.message.includes('API key')) {
      console.log('üí° Probl√®me de configuration API');
    }
  }
}

// Test de retry simul√©
async function testRetryMechanism() {
  console.log('\nüîÑ Test du m√©canisme de retry...');
  
  let attempt = 0;
  const maxRetries = 2;
  
  while (attempt <= maxRetries) {
    attempt++;
    console.log(`Tentative ${attempt}/${maxRetries + 1}`);
    
    try {
      // Simulation d'une requ√™te qui peut √©chouer
      const shouldFail = Math.random() < 0.3; // 30% de chance d'√©chec
      
      if (shouldFail && attempt <= maxRetries) {
        throw new Error('Erreur simul√©e - retry n√©cessaire');
      }
      
      console.log('‚úÖ Succ√®s simul√©');
      break;
      
    } catch (error) {
      console.log(`‚ùå √âchec: ${error.message}`);
      
      if (attempt <= maxRetries) {
        const delay = 2000 * attempt; // D√©lai progressif
        console.log(`‚è≥ Retry dans ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        console.log('üí• Toutes les tentatives ont √©chou√©');
      }
    }
  }
}

async function main() {
  console.log('üöÄ D√©marrage des tests de timeout...\n');
  
  if (!process.env.GOOGLE_GEMINI_API_KEY) {
    console.error('‚ùå GOOGLE_GEMINI_API_KEY non d√©finie');
    process.exit(1);
  }
  
  await testTimeoutImprovements();
  await testRetryMechanism();
  
  console.log('\n‚ú® Tests termin√©s !');
  console.log('\nüìã R√©sum√© des am√©liorations:');
  console.log('‚Ä¢ Timeout Vercel configur√© √† 60s');
  console.log('‚Ä¢ Timeout client √† 45s avec retry automatique');
  console.log('‚Ä¢ Prompt optimis√© pour g√©n√©ration plus rapide');
  console.log('‚Ä¢ Gestion d\'erreur am√©lior√©e c√¥t√© serveur et client');
  console.log('‚Ä¢ M√©canisme de retry avec d√©lai progressif');
}

main().catch(console.error);
