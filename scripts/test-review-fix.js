#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que la correction de r√©cup√©ration des critiques fonctionne
 */

const fetch = require('node-fetch');

async function testReviewFix() {
  console.log('üîß Test de la correction de r√©cup√©ration des critiques\n');
  
  // URL de test (remplacez par votre URL de d√©ploiement)
  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
  const testAlbumId = '1'; // Abbey Road - The Beatles
  
  console.log(`üåê URL de test: ${baseUrl}`);
  console.log(`üìÄ Album de test: ${testAlbumId} (Abbey Road - The Beatles)`);
  
  try {
    // Test 1: V√©rifier que la route GET fonctionne
    console.log('\n1Ô∏è‚É£ Test de la route GET /api/album/[id]/review...');
    
    const getResponse = await fetch(`${baseUrl}/api/album/${testAlbumId}/review`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    console.log(`üìä Status: ${getResponse.status}`);
    
    if (getResponse.ok) {
      const data = await getResponse.json();
      console.log('‚úÖ Route GET fonctionne');
      
      if (data.review) {
        console.log(`üìù Critique trouv√©e: ${data.review.substring(0, 100)}...`);
        console.log(`‚≠ê Note: ${data.rating}`);
      } else {
        console.log('‚ÑπÔ∏è  Aucune critique existante (normal pour un nouvel album)');
      }
    } else {
      const errorData = await getResponse.json().catch(() => ({}));
      console.log(`‚ùå Erreur GET: ${errorData.error || getResponse.statusText}`);
    }
    
    // Test 2: V√©rifier que la route POST g√©n√®re une critique
    console.log('\n2Ô∏è‚É£ Test de la route POST /api/album/[id]/review...');
    
    const postResponse = await fetch(`${baseUrl}/api/album/${testAlbumId}/review`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    console.log(`üìä Status: ${postResponse.status}`);
    
    if (postResponse.ok) {
      const data = await postResponse.json();
      console.log('‚úÖ Route POST fonctionne');
      
      if (data.review) {
        console.log(`üìù Critique g√©n√©r√©e: ${data.review.substring(0, 100)}...`);
        console.log(`‚≠ê Note: ${data.rating}`);
        console.log(`üéµ Album: ${data.albumInfo?.title}`);
      } else {
        console.log('‚ùå Aucune critique g√©n√©r√©e');
      }
    } else {
      const errorData = await postResponse.json().catch(() => ({}));
      console.log(`‚ùå Erreur POST: ${errorData.error || postResponse.statusText}`);
    }
    
    // Test 3: V√©rifier que la r√©cup√©ration fonctionne apr√®s g√©n√©ration
    console.log('\n3Ô∏è‚É£ Test de r√©cup√©ration apr√®s g√©n√©ration...');
    
    const getResponse2 = await fetch(`${baseUrl}/api/album/${testAlbumId}/review`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (getResponse2.ok) {
      const data = await getResponse2.json();
      if (data.review) {
        console.log('‚úÖ La critique est maintenant r√©cup√©rable via GET');
        console.log(`üìù Critique: ${data.review.substring(0, 100)}...`);
        console.log(`‚≠ê Note: ${data.rating}`);
      } else {
        console.log('‚ùå La critique n\'est pas r√©cup√©rable via GET');
      }
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration apr√®s g√©n√©ration');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° Le serveur n\'est pas d√©marr√©');
      console.log('üí° Ex√©cutez: npm run dev');
    } else if (error.message.includes('fetch')) {
      console.log('üí° Probl√®me de r√©seau ou URL incorrecte');
    }
  }
  
  console.log('\nüìã R√©sum√© des corrections appliqu√©es:');
  console.log('‚úÖ Composant AlbumDetails.js: M√©thode GET au lieu de POST pour r√©cup√©rer les critiques');
  console.log('‚úÖ Route API: GET /api/album/[id]/review pour r√©cup√©rer les critiques existantes');
  console.log('‚úÖ Route API: POST /api/album/[id]/review pour g√©n√©rer de nouvelles critiques');
  console.log('‚úÖ DynamoDB: Table AlbumReviews configur√©e correctement');
  
  console.log('\n‚ú® Test termin√© !');
}

testReviewFix().catch(console.error);
