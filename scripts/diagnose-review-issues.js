#!/usr/bin/env node

/**
 * Script de diagnostic pour identifier les probl√®mes de g√©n√©ration de critiques
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');
const Discogs = require('disconnect');

async function diagnoseReviewIssues() {
  console.log('üîç Diagnostic des probl√®mes de g√©n√©ration de critiques\n');
  
  // 1. V√©rification des variables d'environnement
  console.log('1Ô∏è‚É£ V√©rification des variables d\'environnement...');
  
  const requiredEnvVars = [
    'GOOGLE_GEMINI_API_KEY',
    'DISCOGS_USER_TOKEN'
  ];
  
  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.log('‚ùå Variables d\'environnement manquantes:', missingVars);
    return;
  } else {
    console.log('‚úÖ Toutes les variables d\'environnement sont pr√©sentes');
  }
  
  // 2. Test de l'API Google Gemini
  console.log('\n2Ô∏è‚É£ Test de l\'API Google Gemini...');
  
  try {
    const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash",
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
      }
    });
    
    const testPrompt = `Critique musicale de 120-150 mots en fran√ßais :

ALBUM: Abbey Road - The Beatles (1969)
GENRE: Rock | STYLE: Psychedelic Rock, Pop Rock
TRACKS: Come Together, Something, Maxwell's Silver Hammer, Oh! Darling, Octopus's Garden + 12 autres

√âcris une critique qui couvre :
1. L'essence de l'album (vision, intention)
2. Analyse musicale (points forts/faiblesses)
3. Impact et influence
4. Note finale sur 10 avec d√©cimale

Termine par "Note : X.X/10"`;
    
    const startTime = Date.now();
    const result = await model.generateContent(testPrompt);
    const review = result.response.text();
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ Gemini fonctionne - G√©n√©ration en ${duration}ms`);
    console.log(`üìè Longueur critique: ${review.length} caract√®res`);
    
    // V√©rifier la note
    const ratingMatch = review.match(/note[:\s]*(\d+(?:\.\d+)?)\/10/i);
    if (ratingMatch) {
      console.log(`‚≠ê Note extraite: ${ratingMatch[1]}/10`);
    } else {
      console.log('‚ö†Ô∏è  Aucune note trouv√©e dans la critique');
    }
    
  } catch (error) {
    console.log('‚ùå Erreur Gemini:', error.message);
    
    if (error.message.includes('quota')) {
      console.log('üí° Probl√®me de quota - v√©rifiez votre plan Google AI Studio');
    } else if (error.message.includes('API key')) {
      console.log('üí° Cl√© API invalide - v√©rifiez GOOGLE_GEMINI_API_KEY');
    } else if (error.message.includes('timeout')) {
      console.log('üí° Timeout - probl√®me de r√©seau ou serveur lent');
    }
  }
  
  // 3. Test de l'API Discogs
  console.log('\n3Ô∏è‚É£ Test de l\'API Discogs...');
  
  try {
    const dis = new Discogs.Client({ userToken: process.env.DISCOGS_USER_TOKEN });
    
    const startTime = Date.now();
    const release = await dis.database().getRelease(1); // Abbey Road
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ Discogs fonctionne - R√©cup√©ration en ${duration}ms`);
    console.log(`üìÄ Album test: ${release.title} - ${release.artists[0].name}`);
    
  } catch (error) {
    console.log('‚ùå Erreur Discogs:', error.message);
    
    if (error.status === 401) {
      console.log('üí° Token invalide - v√©rifiez DISCOGS_USER_TOKEN');
    } else if (error.status === 429) {
      console.log('üí° Rate limit atteint - attendez avant de r√©essayer');
    } else if (error.status === 404) {
      console.log('üí° Album non trouv√© - ID invalide');
    }
  }
  
  // 4. Test de performance combin√©
  console.log('\n4Ô∏è‚É£ Test de performance combin√©...');
  
  try {
    const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const dis = new Discogs.Client({ userToken: process.env.DISCOGS_USER_TOKEN });
    
    const startTime = Date.now();
    
    // Simuler le processus complet
    console.log('üì° R√©cup√©ration album...');
    const albumStart = Date.now();
    const album = await dis.database().getRelease(1);
    const albumDuration = Date.now() - albumStart;
    console.log(`‚úÖ Album r√©cup√©r√© en ${albumDuration}ms`);
    
    console.log('ü§ñ G√©n√©ration critique...');
    const reviewStart = Date.now();
    const prompt = `Critique de 100 mots de ${album.title} par ${album.artists[0].name}. Termine par "Note : X.X/10"`;
    const result = await model.generateContent(prompt);
    const review = result.response.text();
    const reviewDuration = Date.now() - reviewStart;
    console.log(`‚úÖ Critique g√©n√©r√©e en ${reviewDuration}ms`);
    
    const totalDuration = Date.now() - startTime;
    console.log(`üéâ Processus complet en ${totalDuration}ms`);
    
    // Analyse des performances
    if (totalDuration < 10000) {
      console.log('üöÄ Excellent: Processus tr√®s rapide');
    } else if (totalDuration < 30000) {
      console.log('‚úÖ Bon: Processus dans les temps');
    } else if (totalDuration < 60000) {
      console.log('‚ö†Ô∏è  Lent: Processus acceptable mais proche des limites');
    } else {
      console.log('‚ùå Trop lent: Risque de timeout');
    }
    
  } catch (error) {
    console.log('‚ùå Erreur lors du test combin√©:', error.message);
  }
  
  // 5. Recommandations
  console.log('\n5Ô∏è‚É£ Recommandations:');
  console.log('‚Ä¢ V√©rifiez les logs Vercel pour les erreurs sp√©cifiques');
  console.log('‚Ä¢ Surveillez les quotas Google Gemini');
  console.log('‚Ä¢ Respectez les limites de rate Discogs');
  console.log('‚Ä¢ Utilisez le retry automatique c√¥t√© client');
  console.log('‚Ä¢ Consid√©rez un cache pour les albums populaires');
  
  console.log('\n‚ú® Diagnostic termin√© !');
}

main().catch(console.error);

async function main() {
  await diagnoseReviewIssues();
}
